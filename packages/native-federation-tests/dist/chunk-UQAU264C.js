"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }var _ansicolors = require('ansi-colors'); var _ansicolors2 = _interopRequireDefault(_ansicolors);var _path = require('path');var _rambda = require('rambda');var _tsup = require('tsup');var _unplugin = require('unplugin');var C={testsFolder:"@mf-tests",mocksFolder:"./__mocks__",deleteTestsFolder:!0,maxRetries:3},b=t=>{let e=t.split("@");return e[e.length-1]},l="file:",E=(t,e)=>{let r=b(e),o=new URL(r,l),s=o.pathname.split("/").slice(0,-1).join("/");return o.pathname=`${s}/${t.testsFolder}.zip`,o.protocol===l?o.pathname:o.href},H=t=>Object.entries(t.moduleFederationConfig.remotes).reduce((e,[r,o])=>(e[r]=E(t,o),e),{}),u=t=>{if(!t.moduleFederationConfig)throw new Error("moduleFederationConfig is required");let e={...C,...t},r=H(e);return{hostOptions:e,mapRemotesToDownload:r}};var _fs = require('fs');var T={testsFolder:"@mf-tests",distFolder:"./dist",deleteTestsFolder:!0,additionalBundlerConfig:{}},U=["ts","tsx","js","jsx","mjs"],f=t=>{let e=process.cwd();for(let r of U){let o=_path.join.call(void 0, e,`${t}.${r}`);if(_fs.existsSync.call(void 0, o))return o}},S=t=>Object.entries(t.moduleFederationConfig.exposes).reduce((e,[r,o])=>(e[r]=f(o)||f(_path.join.call(void 0, o,"index"))||o,e),{}),g=t=>{if(!t.moduleFederationConfig)throw new Error("moduleFederationConfig is required");let e={...T,...t},r=S(e),o=Object.keys(t.moduleFederationConfig.shared||{}).concat(Object.keys(t.moduleFederationConfig.remotes||{})),s=_path.join.call(void 0, e.distFolder,e.testsFolder);return{remoteOptions:e,externalDeps:o,compiledFilesFolder:s,mapComponentsToExpose:r}};var _admzip = require('adm-zip'); var _admzip2 = _interopRequireDefault(_admzip);var _axios = require('axios'); var _axios2 = _interopRequireDefault(_axios);var _crypto = require('crypto');var _promises = require('fs/promises');var B=t=>_path.join.call(void 0, t.distFolder,`${t.testsFolder}.zip`),F=async(t,e)=>{let r=new _admzip2.default;return r.addLocalFolder(e),r.writeZipPromise(B(t))},N=(t,e)=>r=>{throw{...r,message:`Network error: Unable to download federated mocks for '${t}' from '${e}' because '${r.message}'`}},a=async(t,e)=>{t.deleteTestsFolder&&await _promises.rm.call(void 0, e,{recursive:!0,force:!0}).catch(r=>console.error(_ansicolors2.default.red(`Unable to remove tests folder, ${r}`)))},w=t=>{let e={},r={};return async([o,s])=>{e[s]=0;let n=_path.join.call(void 0, t.mocksFolder,o);for(;e[s]++<t.maxRetries;)try{let i=await _axios2.default.get(s,{responseType:"arraybuffer"}).catch(N(o,s)),m=Buffer.from(i.data),p=_crypto.createHash.call(void 0, "sha256").update(m).digest("hex");r[s]!==p&&(await a(t,n),new (0, _admzip2.default)(m).extractAllTo(n,!0),r[s]=p);break}catch(i){if(console.error(_ansicolors2.default.red(`Error during types archive download: ${(i==null?void 0:i.message)||"unknown error"}`)),e[s]>=t.maxRetries)throw i}}};var ie=_unplugin.createUnplugin.call(void 0, t=>{let{remoteOptions:e,compiledFilesFolder:r,externalDeps:o,mapComponentsToExpose:s}=g(t);return{name:"native-federation-tests/remote",async writeBundle(){let n=_rambda.mergeRight.call(void 0, e.additionalBundlerConfig,{external:o.map(i=>new RegExp(`^${i}`)),entry:s,outDir:r,silent:!0});try{await _tsup.build.call(void 0, n),await F(e,r),await a(e,r),console.log(_ansicolors2.default.green("Federated mocks created correctly"))}catch(i){console.error(_ansicolors2.default.red(`Unable to build federated mocks: ${i}`))}},get vite(){return process.env.NODE_ENV==="production"?void 0:{buildStart:this.writeBundle,watchChange:this.writeBundle}},webpack(n){n.options.devServer=_rambda.mergeDeepRight.call(void 0, n.options.devServer||{},{static:{directory:_path.resolve.call(void 0, e.distFolder)}})},rspack(n){n.options.devServer=_rambda.mergeDeepRight.call(void 0, n.options.devServer||{},{static:{directory:_path.resolve.call(void 0, e.distFolder)}})}}}),de= exports.b =_unplugin.createUnplugin.call(void 0, t=>{let{hostOptions:e,mapRemotesToDownload:r}=u(t),o=w(e);return{name:"native-federation-tests/host",async writeBundle(){let s=Object.entries(r).map(o);await Promise.allSettled(s),console.log(_ansicolors2.default.green("Federated mocks extraction completed"))},get vite(){return process.env.NODE_ENV==="production"?void 0:{buildStart:this.writeBundle,watchChange:this.writeBundle}}}});exports.a = ie; exports.b = de;
